import unittest
import pandas as pd
from actions import show, hide, query

class TestFunctions(unittest.TestCase):
    def setUp(self):
        # Load the CSV file for testing
        self.df = pd.read_csv("C:\\Users\\Prince\\Desktop\\My-API\\testing.csv")

    def test_show(self):
            # Test show function
            columns, data, error = show(['HD', 'Clarity', 'Color'])
            expected_columns = ['HD', 'Clarity', 'Color']
            expected_data = [['HD', 'VS1', 'H'], ['HD', 'SI2', 'G'], ['HD', 'SI2', 'H'], ['HD', 'SI2', 'H'], ['HD', 'SI2', 'H'], ['HD', 'VS1', 'G'], ['HD', 'VS1', 'G'], ['HD', 'VS1', 'G'], ['HD', 'VS1', 'G'], ['HD', 'VS1', 'G'], ['HD', 'VS1', 'G'], ['HD', 'VS1', 'G'], ['HD', 'VS1', 'G'], ['HD', 'VS1', 'G']]
            expected_error = ""
            self.assertEqual(columns, expected_columns)
            self.assertEqual(data, expected_data)
            self.assertEqual(error, expected_error)

    def test_hide(self):
            columns, data, error = hide(['Photo', 'Carat', 'Cert'])
            expected_columns = ['Sr.No', 'HD', 'H&A', 'Digi Plot', 'Shape', 'Stone ID', 'Clarity', 'Color', 'Base Rate', 'Base Off %', 'Amount', 'Rap $/CT', 'Cut', 'Pol', 'Sym', 'Flour', 'D/R', 'Measurement', 'Total Depth', 'Table', 'Additional Remark', 'Lust', 'Shd.', 'T.W', 'S.W', 'T.B', 'S.B', 'T.S', 'S.S', 'T.O', 'C.O', 'P.O', 'G.O', 'T.EF', 'C.EF', 'P.EF', 'Key To Symbol', 'Lab Comments', 'Graining', 'Girdle', 'Girdle%', 'C.A', 'P.A', 'C.H', 'P.H', 'LowHalf', 'StarLenth', 'Culet Size', 'CM Eligible', 'FM Eligible', 'FP Eligible', 'Login Name']
            expected_data = [[1, 'HD', 'VG', 'DIGIPLOT', 'RBC', 3448820063, 'VS1', 'H', 18220.7, -40.26, 76891.35, 30500, 'EX', 'EX', 'EX', 'FNT', 10.3, '10.26 - 10.33 * 6.46', 62.8, 57, 0, 'EX', 'N', 'CRL1', 'FR1', 'BPP', 'N', 'N', 'N', 'N', 'HL', 'HL', 'N', 'N', 'N', 'N', 'Crystal,Feather,Cloud,Pinpoint', 'Additional pinpoints are not shown,Additional clouds are not shown', 'N', 'MED - STK', 4.0, 34.0, 41.6, 14.5, 44.0, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [2, 'HD', 0, 'DIGIPLOT', 'RBC', 9213560529, 'SI2', 'G', 10316.0, -48.41, 41367.16, 20000, 'EX', 'EX', 'EX', 'FNT', 10.13, '10.09 - 10.16 * 6.3', 62.2, 59, 'RED SPOT,INSPECTION ADVISABLE', 'EX', 'N', 'FR1', 'CRL2', 'B2', 'B1', 'N', 'SPP1', 'N', 'N', 'N', 'HL', 'N', 'N', 'SM', 'Crystal,Feather,Cloud,Needle', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'MED - STK', 4.0, 33.5, 41.6, 14.0, 44.5, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [3, 'HD', 'VG', 'DIGIPLOT', 'RBC', 1448350281, 'SI2', 'H', 10332.0, -42.6, 41741.28, 18000, 'EX', 'EX', 'EX', 'NON', 10.12, '10.09 - 10.14 * 6.32', 62.5, 58, 0, 'EX', 'N', 'SPR1', 'SPR1', 'B1', 'BPP', 'N', 'N', 'N', 'SM', 'HL', 'N', 'N', 'N', 'N', 'Cloud,Crystal,Needle,Indented Natural,Natural', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'MED - STK', 4.0, 36.0, 40.8, 15.5, 43.0, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 0, 'Praveen Dukkipati'], [4, 'HD', 'VG', 'DIGIPLOT', 'RBC', 1214950060, 'SI2', 'H', 12051.0, -33.05, 54350.01, 18000, 'EX', 'EX', 'EX', 'NON', 10.53, '10.49 - 10.56 * 6.59', 62.6, 55, 0, 'EX', 'N', 'FR2', 'FR1', 'BPP', 'BPP', 'N', 'N', 'HL', 'HL', 'SM', 'N', 'N', 'N', 'SM', 'Feather,Crystal,Cloud,Needle', 'Additional clouds, pinpoints and surface graining are not shown', 'SG', 'MED - STK', 4.0, 35.0, 40.8, 15.5, 43.0, 80, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [5, 'HD', 0, 'DIGIPLOT', 'RBC', 5211600085, 'SI2', 'H', 8269.2, -54.05, 37294.09, 18000, 'EX', 'EX', 'EX', 'MED', 10.73, '10.71 - 10.75 * 6.36', 59.2, 62, 'UPGRADED COLOR', 'EX', 'N', 'CRL1', 'CRL1', 'B 2', 'B1', 'N', 'N', 'N', 'N', 'N', 'HL', 'N', 'N', 'SM', 'Crystal,Cloud,Needle,Natural', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'MED - STK', 3.5, 33.0, 41.0, 12.5, 43.5, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [6, 'HD', 'VG', 'DIGIPLOT', 'RBC', 1214270181, 'VS1', 'G', 20949.6, -25.18, 63058.29, 28000, 'EX', 'EX', 'EX', 'NON', 9.18, '9.15 - 9.21 * 5.74', 62.5, 57, 0, 'EX', 'N', 'SPR1', 'SPR1', 'BPP', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'SM', 'Cloud', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'STK - STK', 4.0, 35.5, 40.8, 15.0, 43.0, 80, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [7, 'HD', 'VG', 'DIGIPLOT', 'RBC', 1214510211, 'VS1', 'G', 20109.6, -28.18, 60529.89, 28000, 'EX', 'EX', 'EX', 'NON', 9.13, '9.09 - 9.16 * 5.73', 62.8, 57, 0, 'EX', 'N', 'CRL1', 'FR1', 'BPP', 'BPP', 'N', 'N', 'N', 'N', 'N', 'SM', 'N', 'N', 'N', 'Crystal,Feather,Needle,Natural', 'Clouds are not shown,Pinpoints are not shown', 'N', 'MED - STK', 4.0, 36.0, 40.6, 15.5, 43.0, 80, 45, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [8, 'HD', 'VG', 'DIGIPLOT', 'RBC', 4212970034, 'VS1', 'G', 13949.6, -50.18, 41988.29, 28000, 'EX', 'EX', 'EX', 'MED', 9.14, '9.11 - 9.17 * 5.73', 62.7, 58, 0, 'EX', 'N', 'CRL1', 'FR1', 'BPP', 'BPP', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'SM', 'Crystal,Needle', 'Pinpoints, clouds, internal graining and surface graining are not shown', 'IG SG', 'STK - STK', 4.0, 36.0, 40.8, 15.5, 43.0, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 0, 'Praveen Dukkipati'], [9, 'HD', 0, 'DIGIPLOT', 'RBC', 6212860076, 'VS1', 'G', 18838.4, -32.71, 56703.58, 28000, 'EX', 'EX', 'EX', 'NON', 9.28, '9.26 - 9.3 * 5.69', 61.3, 59, 'UPGRADED CLARITY', 'EX', 'N', 'SPR1', 'FR1', 'BPP', 'B1', 'N', 'N', 'N', 'N', 'HL', 'N', 'N', 'N', 'SM', 'Crystal,Feather,Cloud,Needle', 'Additional clouds, pinpoints and surface graining are not shown', 'SG', 'STK - STK', 4.0, 32.0, 41.6, 13.0, 44.5, 80, 50, 'N', 'CM Eligible', 'FM Eligible', 0, 'Praveen Dukkipati'], [10, 'HD', 'EX', 'DIGIPLOT', 'RBC', 8214270328, 'VS1', 'G', 21056.0, -24.8, 63378.56, 28000, 'EX', 'EX', 'EX', 'NON', 9.15, '9.12 - 9.18 * 5.74', 62.7, 57, 0, 'EX', 'N', 'SPR1', 'FR1', 'BPP', 'N', 'N', 'N', 'N', 'N', 'HL', 'N', 'N', 'N', 'SM', 'Cloud,Needle', 'Additional clouds, pinpoints and surface graining are not shown', 'SG', 'MED - STK', 4.0, 36.0, 40.6, 16.0, 43.0, 80, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [11, 'HD', 'EX', 'DIGIPLOT', 'RBC', 9214450109, 'VS1', 'G', 19614.0, -29.95, 60214.98, 28000, 'EX', 'EX', 'EX', 'NON', 9.36, '9.34 - 9.38 * 5.67', 60.6, 60, 'UPGRADED COLOR', 'EX', 'N', 'CRL1', 'PP1', 'BPP', 'BPP', 'N', 'N', 'N', 'N', 'N', 'HL', 'N', 'N', 'N', 'Crystal,Needle,Indented Natural', 'Pinpoints are not shown,Internal graining is not shown', 'IG', 'STK - STK', 4.0, 32.5, 41.2, 13.0, 43.5, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [12, 'HD', 'EX', 'DIGIPLOT', 'RBC', 1213180150, 'VS1', 'G', 16492.0, -41.1, 51125.2, 28000, 'EX', 'EX', 'EX', 'FNT', 9.41, '9.38 - 9.43 * 5.67', 60.3, 59, 0, 'EX', 'N', 'CRL1', 'FR1', 'BPP', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'Crystal,Feather,Cloud,Needle', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'STK - STK', 4.0, 32.5, 41.0, 13.0, 43.0, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 0, 'Praveen Dukkipati'], [13, 'HD', 'VG', 'DIGIPLOT', 'RBC', 9214510149, 'VS1', 'G', 21047.6, -24.83, 66931.36, 28000, 'EX', 'EX', 'EX', 'NON', 9.34, '9.31 - 9.36 * 5.81', 62.2, 59, 0, 'EX', 'N', 'PP2', 'FR1', 'BPP', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'Feather,Needle', 0, 'N', 'STK - STK', 4.0, 36.0, 40.8, 15.0, 43.0, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [14, 'HD', 0, 'DIGIPLOT', 'RBC', 9448430019, 'VS1', 'G', 16696.4, -40.37, 53261.51, 28000, 'EX', 'EX', 'EX', 'FNT', 9.36, '9.33 - 9.39 * 5.87', 62.7, 58, 0, 'EX', 'N', 'SPR1', 'FR1', 'BPP', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'Crystal,Feather,Cloud,Needle', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'STK - STK', 4.0, 34.0, 41.6, 14.5, 44.5, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 0, 'Praveen Dukkipati']]
            expected_error = ""
            self.assertEqual(columns, expected_columns)
            self.assertEqual(data, expected_data)
            self.assertEqual(error, expected_error)

    def test_query_show(self):
            columns, data, error = query(['show', ['Flour', 'Cut']])
            expected_columns = ['Flour', 'Cut']
            expected_data = [['FNT', 'EX'], ['FNT', 'EX'], ['NON', 'EX'], ['NON', 'EX'], ['MED', 'EX'], ['NON', 'EX'], ['NON', 'EX'], ['MED', 'EX'], ['NON', 'EX'], ['NON', 'EX'], ['NON', 'EX'], ['FNT', 'EX'], ['NON', 'EX'], ['FNT', 'EX']]
            expected_error = ""
            self.assertEqual(columns, expected_columns)
            self.assertEqual(data, expected_data)
            self.assertEqual(error, expected_error)

    def test_query_hide(self):
            columns, data, error = query(['hide',['Stone ID', 'Base Off %']])
            expected_columns = ['Sr.No', 'HD', 'H&A', 'Digi Plot', 'Shape', 'Clarity', 'Color', 'Base Rate', 'Amount', 'Rap $/CT', 'Cut', 'Pol', 'Sym', 'Flour', 'D/R', 'Measurement', 'Total Depth', 'Table', 'Additional Remark', 'Lust', 'Shd.', 'T.W', 'S.W', 'T.B', 'S.B', 'T.S', 'S.S', 'T.O', 'C.O', 'P.O', 'G.O', 'T.EF', 'C.EF', 'P.EF', 'Key To Symbol', 'Lab Comments', 'Graining', 'Girdle', 'Girdle%', 'C.A', 'P.A', 'C.H', 'P.H', 'LowHalf', 'StarLenth', 'Culet Size', 'CM Eligible', 'FM Eligible', 'FP Eligible', 'Login Name']
            expected_data = [[1, 'HD', 'VG', 'DIGIPLOT', 'RBC', 'VS1', 'H', 18220.7, 76891.35, 30500, 'EX', 'EX', 'EX', 'FNT', 10.3, '10.26 - 10.33 * 6.46', 62.8, 57, 0, 'EX', 'N', 'CRL1', 'FR1', 'BPP', 'N', 'N', 'N', 'N', 'HL', 'HL', 'N', 'N', 'N', 'N', 'Crystal,Feather,Cloud,Pinpoint', 'Additional pinpoints are not shown,Additional clouds are not shown', 'N', 'MED - STK', 4.0, 34.0, 41.6, 14.5, 44.0, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [2, 'HD', 0, 'DIGIPLOT', 'RBC', 'SI2', 'G', 10316.0, 41367.16, 20000, 'EX', 'EX', 'EX', 'FNT', 10.13, '10.09 - 10.16 * 6.3', 62.2, 59, 'RED SPOT,INSPECTION ADVISABLE', 'EX', 'N', 'FR1', 'CRL2', 'B2', 'B1', 'N', 'SPP1', 'N', 'N', 'N', 'HL', 'N', 'N', 'SM', 'Crystal,Feather,Cloud,Needle', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'MED - STK', 4.0, 33.5, 41.6, 14.0, 44.5, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [3, 'HD', 'VG', 'DIGIPLOT', 'RBC', 'SI2', 'H', 10332.0, 41741.28, 18000, 'EX', 'EX', 'EX', 'NON', 10.12, '10.09 - 10.14 * 6.32', 62.5, 58, 0, 'EX', 'N', 'SPR1', 'SPR1', 'B1', 'BPP', 'N', 'N', 'N', 'SM', 'HL', 'N', 'N', 'N', 'N', 'Cloud,Crystal,Needle,Indented Natural,Natural', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'MED - STK', 4.0, 36.0, 40.8, 15.5, 43.0, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 0, 'Praveen Dukkipati'], [4, 'HD', 'VG', 'DIGIPLOT', 'RBC', 'SI2', 'H', 12051.0, 54350.01, 18000, 'EX', 'EX', 'EX', 'NON', 10.53, '10.49 - 10.56 * 6.59', 62.6, 55, 0, 'EX', 'N', 'FR2', 'FR1', 'BPP', 'BPP', 'N', 'N', 'HL', 'HL', 'SM', 'N', 'N', 'N', 'SM', 'Feather,Crystal,Cloud,Needle', 'Additional clouds, pinpoints and surface graining are not shown', 'SG', 'MED - STK', 4.0, 35.0, 40.8, 15.5, 43.0, 80, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [5, 'HD', 0, 'DIGIPLOT', 'RBC', 'SI2', 'H', 8269.2, 37294.09, 18000, 'EX', 'EX', 'EX', 'MED', 10.73, '10.71 - 10.75 * 6.36', 59.2, 62, 'UPGRADED COLOR', 'EX', 'N', 'CRL1', 'CRL1', 'B 2', 'B1', 'N', 'N', 'N', 'N', 'N', 'HL', 'N', 'N', 'SM', 'Crystal,Cloud,Needle,Natural', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'MED - STK', 3.5, 33.0, 41.0, 12.5, 43.5, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [6, 'HD', 'VG', 'DIGIPLOT', 'RBC', 'VS1', 'G', 20949.6, 63058.29, 28000, 'EX', 'EX', 'EX', 'NON', 9.18, '9.15 - 9.21 * 5.74', 62.5, 57, 0, 'EX', 'N', 'SPR1', 'SPR1', 'BPP', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'SM', 'Cloud', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'STK - STK', 4.0, 35.5, 40.8, 15.0, 43.0, 80, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [7, 'HD', 'VG', 'DIGIPLOT', 'RBC', 'VS1', 'G', 20109.6, 60529.89, 28000, 'EX', 'EX', 'EX', 'NON', 9.13, '9.09 - 9.16 * 5.73', 62.8, 57, 0, 'EX', 'N', 'CRL1', 'FR1', 'BPP', 'BPP', 'N', 'N', 'N', 'N', 'N', 'SM', 'N', 'N', 'N', 'Crystal,Feather,Needle,Natural', 'Clouds are not shown,Pinpoints are not shown', 'N', 'MED - STK', 4.0, 36.0, 40.6, 15.5, 43.0, 80, 45, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [8, 'HD', 'VG', 'DIGIPLOT', 'RBC', 'VS1', 'G', 13949.6, 41988.29, 28000, 'EX', 'EX', 'EX', 'MED', 9.14, '9.11 - 9.17 * 5.73', 62.7, 58, 0, 'EX', 'N', 'CRL1', 'FR1', 'BPP', 'BPP', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'SM', 'Crystal,Needle', 'Pinpoints, clouds, internal graining and surface graining are not shown', 'IG SG', 'STK - STK', 4.0, 36.0, 40.8, 15.5, 43.0, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 0, 'Praveen Dukkipati'], [9, 'HD', 0, 'DIGIPLOT', 'RBC', 'VS1', 'G', 18838.4, 56703.58, 28000, 'EX', 'EX', 'EX', 'NON', 9.28, '9.26 - 9.3 * 5.69', 61.3, 59, 'UPGRADED CLARITY', 'EX', 'N', 'SPR1', 'FR1', 'BPP', 'B1', 'N', 'N', 'N', 'N', 'HL', 'N', 'N', 'N', 'SM', 'Crystal,Feather,Cloud,Needle', 'Additional clouds, pinpoints and surface graining are not shown', 'SG', 'STK - STK', 4.0, 32.0, 41.6, 13.0, 44.5, 80, 50, 'N', 'CM Eligible', 'FM Eligible', 0, 'Praveen Dukkipati'], [10, 'HD', 'EX', 'DIGIPLOT', 'RBC', 'VS1', 'G', 21056.0, 63378.56, 28000, 'EX', 'EX', 'EX', 'NON', 9.15, '9.12 - 9.18 * 5.74', 62.7, 57, 0, 'EX', 'N', 'SPR1', 'FR1', 'BPP', 'N', 'N', 'N', 'N', 'N', 'HL', 'N', 'N', 'N', 'SM', 'Cloud,Needle', 'Additional clouds, pinpoints and surface graining are not shown', 'SG', 'MED - STK', 4.0, 36.0, 40.6, 16.0, 43.0, 80, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [11, 'HD', 'EX', 'DIGIPLOT', 'RBC', 'VS1', 'G', 19614.0, 60214.98, 28000, 'EX', 'EX', 'EX', 'NON', 9.36, '9.34 - 9.38 * 5.67', 60.6, 60, 'UPGRADED COLOR', 'EX', 'N', 'CRL1', 'PP1', 'BPP', 'BPP', 'N', 'N', 'N', 'N', 'N', 'HL', 'N', 'N', 'N', 'Crystal,Needle,Indented Natural', 'Pinpoints are not shown,Internal graining is not shown', 'IG', 'STK - STK', 4.0, 32.5, 41.2, 13.0, 43.5, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [12, 'HD', 'EX', 'DIGIPLOT', 'RBC', 'VS1', 'G', 16492.0, 51125.2, 28000, 'EX', 'EX', 'EX', 'FNT', 9.41, '9.38 - 9.43 * 5.67', 60.3, 59, 0, 'EX', 'N', 'CRL1', 'FR1', 'BPP', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'Crystal,Feather,Cloud,Needle', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'STK - STK', 4.0, 32.5, 41.0, 13.0, 43.0, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 0, 'Praveen Dukkipati'], [13, 'HD', 'VG', 'DIGIPLOT', 'RBC', 'VS1', 'G', 21047.6, 66931.36, 28000, 'EX', 'EX', 'EX', 'NON', 9.34, '9.31 - 9.36 * 5.81', 62.2, 59, 0, 'EX', 'N', 'PP2', 'FR1', 'BPP', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'Feather,Needle', 0, 'N', 'STK - STK', 4.0, 36.0, 40.8, 15.0, 43.0, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 'Yes', 'Praveen Dukkipati'], [14, 'HD', 0, 'DIGIPLOT', 'RBC', 'VS1', 'G', 16696.4, 53261.51, 28000, 'EX', 'EX', 'EX', 'FNT', 9.36, '9.33 - 9.39 * 5.87', 62.7, 58, 0, 'EX', 'N', 'SPR1', 'FR1', 'BPP', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'Crystal,Feather,Cloud,Needle', 'Additional clouds are not shown,Pinpoints are not shown', 'N', 'STK - STK', 4.0, 34.0, 41.6, 14.5, 44.5, 75, 50, 'N', 'CM Eligible', 'FM Eligible', 0, 'Praveen Dukkipati']]
            expected_error = ""
            self.assertEqual(columns, expected_columns)
            self.assertEqual(data, expected_data)
            self.assertEqual(error, expected_error)
        
    def test_show_invalid_column(self):
        invalid_column = ['HD','photo']
        cols, data, error = show([invalid_column])
        
        self.assertEqual(error, f"{invalid_column} column name is not present.\n")
    
    def test_hide_invalid_column(self):
        invalid_column = ['Hd','photo']
        cols, data, error = hide([invalid_column])
        
        self.assertEqual(error, f"{invalid_column} column name is not present.")
    
    def test_show_empty_column_list(self):
        cols, data, error = query(['shoo',['HD']])
        
        self.assertEqual(error, "Give appropriate inputs.")
    
    def test_hide_empty_column_list(self):
        cols, data, error = query(['hidd',['Cut']])
        
        self.assertEqual(error, "Give appropriate inputs.")

if __name__ == '__main__':
    unittest.main()
